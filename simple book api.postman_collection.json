{
	"info": {
		"_postman_id": "9a148907-e8a5-4add-a555-0921740d9a9f",
		"name": "simple book api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27558184"
	},
	"item": [
		{
			"name": "status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/status",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		},
		{
			"name": "list of books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is a non-empty array\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Each book has the expected properties\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    jsonData.forEach(function(book) {\r",
							"        pm.expect(book).to.have.all.keys('id', 'name', 'type', 'available');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Each ISBN value is unique\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    var isbnSet = new Set();\r",
							"\r",
							"    jsonData.forEach(function(book) {\r",
							"        pm.expect(isbnSet.has(book.id)).to.be.false;\r",
							"        isbnSet.add(book.id);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Each ISBN value is a string\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    jsonData.forEach(function(book) {\r",
							"        pm.expect(book.id).to.be.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"// Parse the response body to extract the list of books\r",
							"var bookList = pm.response.json();\r",
							"\r",
							"// Extract the book IDs from the list\r",
							"const bookIDs = bookList.slice(1, 6).map(book => book.id);\r",
							"\r",
							"// Set the book IDs as a variable\r",
							"pm.globals.set(\"bookIDs\", JSON.stringify(bookIDs));\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/books",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "single book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"const storedBookIds = JSON.parse(pm.globals.get(\"bookIDs\"));\r",
							"\r",
							"// Select a random book ID from the list\r",
							"const randomIndex = Math.floor(Math.random() * storedBookIds.length);\r",
							"const randomBookId = storedBookIds[randomIndex];\r",
							"\r",
							"// Set the random book ID as a variable for this request\r",
							"pm.globals.set(\"bookIDs\", randomBookId);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/books/{{bookIDs}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"books",
						"{{bookIDs}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "register",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var random = Math.random().toString(36).substring(2);\r",
							"var useremail = \"jim\"+random+\"@gmail.com\";\r",
							"\r",
							"\r",
							"pm.environment.set(\"email_book\", useremail);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.globals.set(\"accessToken\", jsonData.accessToken);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"Neha\",\r\n   \"clientEmail\": \"{{email_book}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/api-clients/",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"api-clients",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "submit an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body contains an 'order_id' property\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property('orderId');\r",
							"});\r",
							"\r",
							"pm.test(\"Order ID value is a string\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.orderId).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Order ID value is not empty\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData.orderId).to.not.be.empty;\r",
							"});\r",
							"\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.globals.set(\"orderId\",jsonData.orderId);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var random = Math.random().toString(36).substring(2);\r",
							"var customerName = \"jim\"+random;\r",
							"pm.environment.set(\"custname\", customerName);\r",
							"\r",
							"const bookId = [1, 2, 3, 4, 5, 6];\r",
							"\r",
							"// Generate a random index within the range of the bookIds array\r",
							"const randomIndex = Math.floor(Math.random() * bookId.length);\r",
							"\r",
							"// Get the random book ID from the array\r",
							"const randomBookId = bookId[randomIndex];\r",
							"\r",
							"// Set the random book ID as a variable in Postman\r",
							"pm.globals.set(\"bookId\", randomBookId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": \"{{bookId}}\",\r\n  \"customerName\": \"{{custname}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/orders",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"pm.test(\"Response body is not empty\", function () {\r",
							"        pm.response.to.not.be.empty;\r",
							"    });\r",
							"\r",
							"pm.test(\"Response body is an array\", function () {\r",
							"        var jsonData = pm.response.json();\r",
							"\r",
							"        pm.expect(jsonData).to.be.an('array');\r",
							"    });\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/orders",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "get  an order",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/orders/{{orderId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"orders",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update an order",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var random = Math.random().toString(36).substring(2);\r",
							"var customerName = \"jim\"+random;\r",
							"\r",
							"pm.environment.set(\"custname\", customerName);\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\": \"{{custname}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/orders/{{orderId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"orders",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/orders/:orderId",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"orders",
						":orderId"
					],
					"variable": [
						{
							"key": "orderId",
							"value": "{{orderId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "https://simple-books-api.glitch.me"
		},
		{
			"key": "accesstoken",
			"value": "--------",
			"type": "default"
		}
	]
}